openapi: 3.0.0
info:
  title: Intermediate Programming APIs
  description: "APIs used by studentsin the CSC 211: intermediate programming."
  version: 1.0.0
servers:
  - url: https://su5r8ko64h.execute-api.us-east-1.amazonaws.com
    description: Main production server
paths:
  /api/helloworld:
    get:
      summary: Returns "Hello World"
      responses:
        '200':
          description: Returns "Hello World"
          content:
            text/plain:
              schema:
                type: string
                example: "Hello World"
  /api/meaning-of-life:
    get:
      summary: Returns the meaning of life
      responses:
      '200':
        description: Returns the meaning of life
        content:
          text/plain:
            schema:
              type: string
      
  /api/jokes:
    post:
      tags:
        - Jokes
      summery: Adds a joke to the list of jokes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                joke:
                  type: string
              required:
                - joke
      responses:
        '201':
          description: Successfully appends the joke you submitted to the end of the list of jokes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Joke'
        '422':
          description: Malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Missing body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/jokes/random:
    get:
      tags:
        - Jokes
      summary: Returns a random joke
      responses:
        '200':
          description: Returns a random joke
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Joke'
  /api/jokes/{id}:
    get:
      tags:
        - Jokes
      summary: Returns joke by id
      parameters:
        - name: id
          in: path
          required: true
          description: id of the joke
          schema:
            type: number
      responses:
        '200':
          description: Returns a joke by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Joke'
        '404':
          description: Joke id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/posts:
    post:
      summary: Creates a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: Content of the post
              required:
                - desc
      parameters:
        - in: header
          name: authentication
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successfully adds your new post 
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: ID of the created post
                  text:
                    type: string
                    description: The content of the newly created post
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Joke:
      type: object
      properties:
        id:
          type: number
          example: 7
        joke:
          type: string
          example: Why do programmers always mix up Christmas and Halloween? Because Oct 31 == Dec 25.
    Error:
      type: object
      properties:
        error:
          type: string

/api/sign-up:
  post:
    summary: Creates a new user
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              username:
                type: string
              password:
                type: string
            required:
              - email
              - username
              - password
    responses:
      '201':
        description: User created successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      '400':
        description: Invalid input data
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      '409':
        description: User already exists
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
/api/login:
  post:
    summary: Logs user in
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
            required:
              - email
              - password
    responses:
      '200':
        description: Successful login
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      '400':
        description: Invalid input data
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      '401':
        description: Invalid email or password
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
 

 /api/users:
    get:
      summary: Get all user ids
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of user ids
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/users/{id}:
    get:
      summary: Get a user's info by ID
      description: This endpoint retrieves a user's information by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        '200':
          description: Successfully retrieved user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 12345
                  email:
                    type: string
                    format: email
                    example: user@example.com
                  username:
                    type: string
                    example: john_doe
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error

     put:
    summary: Change the information of a user
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              username:
                type: string
              password:
                type: string
    responses:
      '200':
        description: User updated successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      '401':
        $ref: '#/components/responses/UnauthorizedError'
      '404':
        description: User not found
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string

    delete:
      summary: Delete a user by ID
      description: This endpoint deletes a user by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        '200':
          description: Successfully deleted user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error












