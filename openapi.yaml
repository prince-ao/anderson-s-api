openapi: 3.0.0
info:
  title: Intermediate Programming APIs
  description: "APIs used by studentsin the CSC 211: intermediate programming."
  version: 1.0.0
servers:
  - url: https://su5r8ko64h.execute-api.us-east-1.amazonaws.com
    description: Main production server
paths:
  /api/helloworld:
    get:
      summary: Returns "Hello World"
      responses:
        '200':
          description: Returns "Hello World"
          content:
            text/plain:
              schema:
                type: string
                example: "Hello World"
  /api/meaning-of-life:
    get:
      summary: Returns the meaning of life
      responses:
      '200':
        description: Returns the meaning of life
        content:
          text/plain:
            schema:
              type: string
      
  /api/jokes:
    post:
      tags:
        - Jokes
      summery: Adds a joke to the list of jokes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                joke:
                  type: string
              required:
                - joke
      responses:
        '201':
          description: Successfully appends the joke you submitted to the end of the list of jokes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Joke'
        '422':
          description: Malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Missing body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/jokes/random:
    get:
      tags:
        - Jokes
      summary: Returns a random joke
      responses:
        '200':
          description: Returns a random joke
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Joke'
  /api/jokes/{id}:
    get:
      tags:
        - Jokes
      summary: Returns joke by id
      parameters:
        - name: id
          in: path
          required: true
          description: id of the joke
          schema:
            type: number
      responses:
        '200':
          description: Returns a joke by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Joke'
        '404':
          description: Joke id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/posts:
    get:
      tags:
        - Post
      summary: Gets all recent posts
      parameters:
        - name: authentication
          in: header
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Limit of posts to return
      responses:
        '200':
          description: A list of the recent posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post' 
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Post
      summary: Creates a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: Content of the post
              required:
                - desc
      parameters:
        - name: authentication
          in: header
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successfully adds your new post 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/posts/{id}:
    get:
      tags:
        - Post
      summary: Returns post by id
      parameters:
        - name: authentication
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          description: The id of the post
          schema:
            type: number
      responses:
        '200':
          description: Returns a post with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input / id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Post
      summary: Updates a post by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: Content used to update post
              required:
                - desc
      parameters:
        - name: authentication
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          description: The id of the post
          schema:
            type: number
      responses:
        '200':
          description: Updated post with specified id with content provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input / id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Post
      summary: Deletes a post by id
      parameters:
        - name: authentication
          in: header
          required: true
          schema:
            type: string
        - name id:
          in: path
          required: true
          description: The id of the post
          schema:
            type: number
      responses:
        '200':
          description: Successfully deleted the post with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input / id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Joke:
      type: object
      properties:
        id:
          type: number
          example: 7
        joke:
          type: string
          example: Why do programmers always mix up Christmas and Halloween? Because Oct 31 == Dec 25.
    Error:
      type: object
      properties:
        error:
          type: string
    Post:
      type: object
      properties:
        id:
          type: number
          description: The id of the post
        text: 
          type: string
          description: The text of the post
  /api/sign-up:
    post:
      summary: Create a new user
      description: This endpoint allows a new user to sign up by providing their email, username, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                username:
                  type: string
                  example: john_doe
                password:
                  type: string
                  example: securePassword123
              required:
                - email
                - username
                - password
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 12345
                  email:
                    type: string
                    format: email
                    example: user@example.com
                  username:
                    type: string
                    example: john_doe
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input data
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User already exists
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error 
/api/login:
    post:
      summary: Log in a user
      description: This endpoint logs in a user by verifying their email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: securePassword123
              required:
                - email
                - password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: jwt_token
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email or password
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
